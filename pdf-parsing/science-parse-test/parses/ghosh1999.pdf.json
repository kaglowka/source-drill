{
  "name" : "ghosh1999.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Voting for movies: the anatomy of a recommender system",
    "authors" : [ "Sumit Ghosh", "Manisha Mundhe", "Karina Hernandez", "Sandip Sen" ],
    "emails" : [ "sandip@euler.mcs.utulsa.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Voting for movies: the anatomy of a recommender system\nSumit Ghosh, Manisha Mundhe, Karina Hernandez, & Sandip Sen Mathematical & Computer Sciences Department\nUniversity of Tulsa manisha, sandip@euler.mcs.utulsa.edu\n1 Introduction\nPersonal assistant agents embody a clearly beneficial application of intelligent agent technology. A particular kind of assistant agents, recommender systems (RSs), can be used to recommend items of interest to users [l]. To be successful, such systems should be able to model and reason with user preferences for items in the application domain. We are developing a movie recommender system that caters to the interests of a user. Our primary concern is to utilize a reasoning procedure that can meaningfully and systematically tradeoff between conflicting user preferences. We have adapted mechanisms from voting theory that have desirable guarantees regarding the recommendations generated from stored preferences. We provide multiple query modalities by which the user can pose unconstrained, constrained, or instance-based queries.\nTypically a domain has several features or dimensions. Each dimension consists of a collection of elements, and the preferences of a user are given by his/her ratings of those elements on some ordinal or cardinal scale. To obtain a recommendation rating for a given item, an RS considers the feature values of that item, obtains ratings for these values from corresponding dimensions, and then combines these ratings by some evaluation scheme.\n2 System functionality and architecture\nIn this paper, we present the architecture (see Figure 1) and implementation status of an agent-based movie recommender system. In particular, we detail how our agent stores and uses user preferences to find recommendations that are likely to be useful to the user. It is cliche to say that human beings often have conflicting preferences. More appropriately, when we have to choose between more than one alternative, each of which may be more attractive to us than the other for some reason, we have to tradeoff our preferences to arrive at a compromise selection.\nThe movie recommender system provides the following major functionalities to its users: 1. Storing of user preferences in the form of the user weigh-\nPermission to make digital or hard copies of all or part of this work for\npersonal or clawown use is granted without fee provided lhat copies are not made or distributed for profit or commercial advantage and that copies hear this notice and the full citation on the first page. TO copy otherwise. to republish. to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Autonomous Agents ‘99 Seattle WA USA Copyright ACM 1999 I-581 13-066-x/99/05...$5.00\nMovis Darmbnsc ussr I=rcrcrcnccs\n_____________--_____-----------------------------.\nFigure 1: The architecture of the movie RS.\ntage of different elements in several dimensions like actors, actresses, directors, time period (in terms of decades), genres (comedy, drama etc). The system also stores the relative importance of each of these dimensions by collecting preference rankings of the dimensions from the users. 2. The system can recommend movies to the users based on their stored preferences. Only a few most suitable and probably likeable movies are suggested. Movies to be suggested are selected by a combination of voting and nearest neighbor algorithms based on the user specific knowledge available to the system.\nWe have adapted methods developed in the voting theory literature to find compromises between possibly disparate preferences. Voting is a well understood mechanism for reaching consensus [3]. Voting schemes allow us to find compromises with some guarantees regarding the nature of the tradeoff. They are also robust to small errors in estimates of user preferences.\nOne of our major concerns is that we effectively capture the interactions between the many and conflicting preferences that the user has for a movie. Voting schemes have been successfully used in different contexts to arrive at a compromise choice between several candidates [2]. With the guarantees provided by the voting scheme, the movie recommender system can generate convincing arguments for recommending a particular movie when its associated user asks for an explanation. The capability to provide a formal explanation of agent behavior has been an added incentive for the use of voting techniques in our implementation.\nWe have chosen Black’s voting rule: choose a Condercet\nWinner if one exists, otherwise choose option with highest Borda count. If M is the set of movies, D is a set of dimensions, V, is the weight for dimension Z, and m, is the value of ith dimension for movie m, then a Condorcet winner m exists if:\n3m E M,tlw E MAW # m, c K>\nc\n{rl:EDAm*>w,} t313EDAJ#ahmj>wj~\nThe Borda count of movie m is given by\nFor a given movie, we calculate the vote for each dimension as a product of the weight on that dimension multiplied by the relative rankings of the elements within the dimension. The top few vote receivers will be returned as recommended by the system. The estimated value or rating of a movie to be recommended is calculated as the ratio of the number of votes it gets to the maximum number of votes a movie can get for the given user preferences.\nBecause stated user preferences may only be approximations of their true preferences, an agent utilizing a votingbased consensus reaching mechanism is not guaranteed to always select movies that will be of interest to the user. In practice, such guarantees are perhaps impossible to provide, and it is very likely that most users will be happy with recommendations that fit their preferences most of the time. As such, our mechanism should have two properties: effectiveness, and robustness. Effectiveness ensures that given the user preferences, the system should recommend movies chosen meaningfully using those preferences. Robustness means that minor changes in the preferences should not produce radical changes in the recommendations produced. This property is particularly important given the approximate nature of the stated user preferences.\n3 Experimental Results\nOur movie recommender system is implemented in Java and uses JDBC to query Oracle database. The query modes in our recommender system are: 1. Recommendations based on the stored user preferences (unconstrained queries). 2. Recommendations based on constraints specified by the user on one or more dimensions and the stored user preferences (constrained queries).\nWe now illustrate the usefulness of the system by using few typical queries. Consider the preference values and the recommended movies for an unconstrained query in Figure 2(a). According to the stated preferences in this example, the ‘Type’ dimension has the highest value and is weighted significantly more than other dimensions. Within this dimension, the ‘Musical’ option has the highest preference. This is largely responsible for all recommended movies to be ‘Musical’ category. Now let us analyze why Hook is rated the highest. The genre of Hook is Musical, Comedy and Action; the cast includes Robin Williams, and Dustin Hoffman; and it is directed by Steven Spielberg. The user preferences depict ‘Actor’ dimension as the second highest dimension and the Robin Williams as a rated top actor. Steven Spielberg is the highest ranked director for this user. The combined effect of these preferences result in Hook being rated as the top ranked movie. The remaining movies cast either ‘Sandra Bullock’ or ‘Barbra Streisand’ who are rated second in the Actress dimension.\nFigure 2: Sample User preferences for unconstrained query.\nIf now the user only changes his/her preference of ‘Drama’ movies to equal that of ‘Musical’ movies (see Figure 2(b)), movies of type ‘Drama’ and casting Robin Williams (the highest rated actor) get higher Borda count, e.g., Good Will Hunting, Good Morning Vietnam, Jack etc. replace the musical movies recommended before (Funny Lady, A Star is Born, etc.). Hook remains the winner. This example shows that the system is adaptive to user preferences.\nThe voting mechanism we propose here is robust to small variations in the user preferences whereas proportional ranking mechanism is not. In proportional ranking mechanism, dimension values multiplied by the vote for that dimension decides the final vote for the movie. If vote for a dimension is high, even small variations have pronounced effect. On the other hand, for the voting scheme using Black’s rule, the relative rankings and dimension votes are used to calculate the number of votes for a movie. Therefore, as long as the relative rankings within the dimensions remain the same, variations in the preference values will not change the votes for the movie. This makes the system robust to small imprecision and inaccuracies in stated preferences.\nWe plan to incorporate learning schemes by which the movie RS can update stored user preferences based on user feedback on prior recommendations. We also want to add keyword and story lines to movie descriptions to enhance the quality of recommendations.\nReferences\n[l] Henry Kautz (Editor). Working notes of the AAAI-98 workshop on recommender systems, 1998.\n[2] Thomas Haynes, Sandip Sen, Neeraj Arora, and Rajani Nadella. An automated meeting scheduling system that utilizes user preferences. In Proceedings of the First International Conference on Autonomous Agents, pages 308-315, New York: NY, 1997. ACM Press.\n[3] Philip D. Jr. Straffin. Topics in the theory of voting. The UMAP expository monograph series. Birkhauser, Boston, MA, 1980."
    } ],
    "references" : [ {
      "title" : "An automated meeting scheduling system that utilizes user preferences",
      "author" : [ "Thomas Haynes", "Sandip Sen", "Neeraj Arora", "Rajani Nadella" ],
      "venue" : "In Proceedings of the First International Conference on Autonomous Agents,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 1997
    }, {
      "title" : "Straffin. Topics in the theory of voting",
      "author" : [ "Philip D. Jr." ],
      "venue" : "The UMAP expository monograph series. Birkhauser,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 1980
    } ],
    "referenceMentions" : [ ],
    "year" : 1999,
    "abstractText" : "Personal assistant agents embody a clearly beneficial application of intelligent agent technology. A particular kind of assistant agents, recommender systems (RSs), can be used to recommend items of interest to users [l]. To be successful, such systems should be able to model and reason with user preferences for items in the application domain. We are developing a movie recommender system that caters to the interests of a user. Our primary concern is to utilize a reasoning procedure that can meaningfully and systematically tradeoff between conflicting user preferences. We have adapted mechanisms from voting theory that have desirable guarantees regarding the recommendations generated from stored preferences. We provide multiple query modalities by which the user can pose unconstrained, constrained, or instance-based queries. Typically a domain has several features or dimensions. Each dimension consists of a collection of elements, and the preferences of a user are given by his/her ratings of those elements on some ordinal or cardinal scale. To obtain a recommendation rating for a given item, an RS considers the feature values of that item, obtains ratings for these values from corresponding dimensions, and then combines these ratings by some evaluation scheme.",
    "creator" : null
  }
}